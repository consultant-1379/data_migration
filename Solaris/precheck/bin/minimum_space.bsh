#!/usr/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2024 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : minimum_space.bsh
# Date    : 28/05/2024
# Revision: /main/02
# Purpose : Script to check if RAM size available on the server is 256 GB or not.
# Usage   : minimum_space.bsh
# ********************************************************************
#
#   Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO='/usr/bin/echo -e'
GETENT=/usr/bin/getent
HEAD=/usr/bin/head
ID=/usr/bin/id
MKDIR=/usr/bin/mkdir
MYHOSTNAME=/usr/bin/hostname
RM=/usr/bin/rm
SSH=/usr/bin/ssh
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch


### Function: abort_script 
#                                                                     
#   This will be called if the script is aborted through an error     
#   signal sent by the kernel such as CTRL-C or if a serious          
#   error is encountered during runtime                               
#                                                                     
# Arguments:                                                          
#       $1 - Error message from part of program (Not always used)     
# Return Values:                                                      
#       none                                                          

abort_script()
{
    _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

    if [ "$1" ]; then
        _err_msg_="${_err_time_} - $1"
    else
        _err_msg_="${_err_time_} - ERROR : Script aborted.......\n"
    fi

    if [ "${LOGFILE}" ]; then
        $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
    else
        $ECHO "\nERROR : ${_err_msg_}\n"
    fi

    $RM -rf ${TEM_DIR}
    exit 3
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error message and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none

check_id()
{
local _check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`

if [ "${_check_id_}" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: chk_logfile ###
#
# Check Logfile
#
# Arguments:
#   none
# Return Values:
#   none

chk_logfile()
{

if [ ! -d ${ENIQ_PRECHECK_LOG_DIR}  ]
    then
    $MKDIR -p ${ENIQ_PRECHECK_LOG_DIR}
    if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory : ${ENIQ_PRECHECK_LOG_DIR}"
    abort_script "${_err_msg_}" 
    fi
fi
 
if [ -s ${LOGFILE}  ]
    then
    $RM -rf ${LOGFILE} 
    if [ -s ${LOGFILE}  ]
    then
        _err_msg_="Warning : Could not remove older ${LOGFILE}"
        abort_script "$_err_msg_"
    fi
fi

 
$TOUCH ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not write to file ${LOGFILE}"
    abort_script "$_err_msg_"
fi

$ECHO "Changing permission of the ${LOGFILE} to 644" | $TEE -a ${LOGFILE}
$CHMOD 644 ${LOGFILE}
if [ $? -ne 0 ]; then
    _err_msg_="Could not change the permissions of the ${LOGFILE} file to 644"
    abort_script "$_err_msg_"
fi
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: setup_env ###
#
# Setup up path environment
# Imports the common lib files which imports common functions 
#
# Arguments:
#   none
# Return Values:
#   none

setup_env()
{
if [ ! "${ENIQ_BASE_DIR}" ]; then
    ENIQ_BASE_DIR=/eniq
fi

# Main Directory for the Core Installation SW
ENIQ_INST_DIR=${ENIQ_BASE_DIR}/installation

# ENIQ LIB Directory
LIB_DIR=/lib

#ENIQ config directory
ENIQ_CONF_DIR=${ENIQ_INST_DIR}/config

#IPMP ini file 
IPMP_INI=${ENIQ_CONF_DIR}/ipmp.ini

# Local logs directory
ENIQ_PRECHECK_LOG_DIR=${ENIQ_BASE_DIR}/local_logs/precheck_logs

# Eniq core install directory
ENIQ_CORE_INST_DIR=${ENIQ_INST_DIR}/core_install

# ENIQ SSH Directory
ENIQ_SSH_DIR=${ENIQ_BASE_DIR}/home/dcuser/.ssh

# Source the common functions
if [ -s ${SCRIPTHOME}/../../lib/common_functions.lib ]; then
    . ${SCRIPTHOME}/../../lib/common_functions.lib
else
    _err_msg_="File ${SCRIPTHOME}/../lib/common_functions.lib not found"
    abort_script "${_err_msg_}" 
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_core_install_functions.lib not found"
    abort_script "${_err_msg_}"
fi

if [ -s ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib ]; then
    . ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib
else
    _err_msg_="File ${ENIQ_CORE_INST_DIR}/${LIB_DIR}/common_inirator_functions.lib not found"
    abort_script "${_err_msg_}"
fi


HNAME=`${MYHOSTNAME}`
HOST_IP=`${MYHOSTNAME} -i| $AWK '{print $1}'`

}

### Function: minimum_ram_space ###
#
# Get the minimum_ram_space check
# 
#
# Arguments:
#       none
# Return Values:
#       none

minimum_ram_space()
{
$RM -rf ${TEM_DIR}/execution_order_list

log_msg -l "${LOGFILE}" -s "\nGetting execution order for the blades..\n"

/usr/bin/perl ${ENIQ_CORE_INST_DIR}/lib/get_ip_order.pl -f ${TEM_DIR}/execution_order

if [ $? -ne 0 ]; then
    _err_msg_="Could not get an ordered list of servers."
    abort_script "${_err_msg_}"
fi

log_msg -l "${LOGFILE}" -s "Execution Order :\n`$CAT ${TEM_DIR}/execution_order`"
for _line_ in `$CAT ${TEM_DIR}/execution_order`; do
        local _count_
        _count_=`$ECHO ${_line_} |grep -o "::" | wc -l`
        if [ "${_count_}" == 3 ]; then
             _ip_address_=`$ECHO ${_line_}| $GREP -oE '([a-fA-F0-9]{1,4}::?){1,7}[a-fA-F0-9]{1,4}' | $HEAD -n 1 | $AWK -F "::" '{ print $1 "::" $2}'`
             _serv_hostname_=`$ECHO ${_line_} | $AWK -F"::" '{print $3}'`
        else
             _ip_address_=`$ECHO ${_line_} | $AWK -F"::" '{print $1}'`
             _serv_hostname_=`$ECHO ${_line_} | $AWK -F"::" '{print $2}'`
        fi
    
        if [ ! "${_ip_address_}" -o ! "${_serv_hostname_}" ]; then
            _err_msg_="Could not read required info."
            abort_script "${_err_msg_}"
        fi
        log_msg -l "${LOGFILE}" -s "\nBLADE : ${_serv_hostname_}"
        if [ "${_ip_address_}" != "${HOST_IP}" ]; then
            log_msg -t -l "${LOGFILE}" -s "This specific precheck is for need not to be execute on this blade"
        else 
            min_value=263628084

            $ECHO "Precheck started for available space check" | $TEE ${LOGFILE}

            current=`$GREP "MemTotal" /proc/meminfo | $AWK '{ print $2 }'`

            if [[ "$current" -lt "$min_value" ]]; then
                $ECHO "Memory space is less than 256 GB, it needs to be expanded." | $TEE ${LOGFILE}
                RET_CODE=249
            else
                $ECHO "Space is sufficient \nStatus: SUCCESS\n" | $TEE ${LOGFILE}
                RET_CODE=0
            fi
        
        fi
done
}

# ********************************************************************
#
#       Main body of program
#
# ********************************************************************
#

# Default user
DEFAULT_USER=root

# Check that the effective id of the user is root
check_id ${DEFAULT_USER}

#get absolute path
get_absolute_path

# Set up environment variables for script.
setup_env

# Logfile path
LOGFILE=${ENIQ_PRECHECK_LOG_DIR}/minimum_space.log

#Return code declaration
RET_CODE=0 

# Check Logfile
chk_logfile

#Create a temporary Directory
TEM_DIR=/tmp/minimum_ram_space_check.$$.$$

$MKDIR -p ${TEM_DIR}

if [ $? -ne 0 ]; then
    _err_msg_="Could not create directory ${TEM_DIR}"
    abort_script "${_err_msg_}"
fi

# minimum_ram_space check
minimum_ram_space

log_msg -t -s "Minimum RAM space available check completed. Check log ${LOGFILE}\n"

$RM -rf ${TEM_DIR}
if [ -s ${TEM_DIR} ]; then
    _err_msg_="Could not remove ${TEM_DIR}"
    abort_script "$_err_msg_"
fi

exit ${RET_CODE}
